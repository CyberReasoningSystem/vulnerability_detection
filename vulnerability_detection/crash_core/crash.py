import abc

from vulnerability_detection.crash_core.input_surface import InputSurface


class Crash:
    input_surfaces: [InputSurface]
    _executable_path: str
    _source_path: str

    def __init__(self, input_surfaces=None, executable_path: str = "", source_path: str = ""):
        if input_surfaces is None:
            input_surfaces = []
        self.input_surfaces = input_surfaces
        self._executable_path = executable_path
        self._source_path = source_path
        pass

    def add_input_surfaces(self, input_surface: InputSurface):
        self.input_surfaces.append(input_surface)


class CrashConsumer(abc.ABC):
    @abc.abstractmethod
    def notify_new_crash(self, crash: Crash) -> None:
        raise NotImplementedError()


class PrintCrashConsumer(CrashConsumer):

    def notify_new_crash(self, crash: Crash) -> None:
        print(
            f":white_check_mark: New crash from {crash.source_path} source file"
        )
        for input_surface in crash.input_surfaces:
            print(f"Input stream: {input_surface.stream.name} | Payload: {input_surface.payload}")
        print("")
