#!/usr/bin/env python3


import hexdump
from rich import print  # pylint: disable=redefined-builtin

from vulnerability_detection.fuzzing import (
    AFLPlusPlus,
    AFLPlusPlusForArguments,
    Crash,
    CrashConsumer,
    InputStream,
)


class PrintCrashConsumer(CrashConsumer):
    def notify_new_crash(self, crash: Crash) -> None:
        print(
            f":white_check_mark: New crash from {crash.stream.name} input"
            " stream with input:\n"
        )
        hexdump.hexdump(crash.payload)
        print("")


def __set_consumer(fuzzer: AFLPlusPlus) -> None:
    consumer = PrintCrashConsumer()

    fuzzer.attach_consumer(consumer)


def main() -> None:
    # fuzzer = AFLPlusPlus()
    fuzzer = AFLPlusPlusForArguments("--string %s")

    # fuzzer.set_input_stream(InputStream.FILES)
    fuzzer.set_input_stream(InputStream.ARGUMENTS)

    # TODO: Replace with arguments
    binary_file = "test/buffer_overflow/bin/buffer_overflow.elf"
    sample_inputs_folder = "test/buffer_overflow/sample_inputs"
    fuzzer.set_target(binary_file, sample_inputs_folder)

    __set_consumer(fuzzer)

    fuzzer.start_fuzzing()


if __name__ == "__main__":
    main()
