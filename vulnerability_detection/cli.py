#!/usr/bin/env python3

from enum import Enum

import click
import hexdump
from rich import print  # pylint: disable=redefined-builtin

from commons.input_streams import InputStreams
from vulnerability_detection.fuzzing import (
    ArgumentsAFLPlusPlus,
    BaseFuzzer,
    FilesAFLPlusPlus,
    ProofOfVulnerability,
    StdinAFLPlusPlus,
)
from vulnerability_detection.pov_consumer import PoVConsumer


class ConfiguredFuzzer:
    actual_class: BaseFuzzer
    used_input_stream: InputStreams

    def __init__(
        self, actual_class: BaseFuzzer, used_input_stream: InputStreams
    ) -> None:
        self.actual_class = actual_class
        self.used_input_stream = used_input_stream


class ExposedFuzzers(Enum):
    FILES_AFLPLUSPLUS = ConfiguredFuzzer(FilesAFLPlusPlus, InputStreams.FILES)
    ARGS_AFLPLUSPLUS = ConfiguredFuzzer(
        ArgumentsAFLPlusPlus, InputStreams.ARGUMENTS
    )
    STDIN_AFLPLUSPLUS = ConfiguredFuzzer(StdinAFLPlusPlus, InputStreams.STDIN)


def convert_name_to_fuzzer(name: str, arguments_pattern: str) -> BaseFuzzer:
    configured_fuzzer = getattr(ExposedFuzzers, name).value

    fuzzer = configured_fuzzer.actual_class(arguments_pattern)
    fuzzer.set_input_stream(configured_fuzzer.used_input_stream)

    return fuzzer


class PrintPoVConsumer(PoVConsumer):
    def notify_new_pov(self, pov: ProofOfVulnerability) -> None:
        print(
            "New proof of vulnerability was generated with the following"
            " payloads:"
        )

        for payload in pov.payloads_per_streams:
            print(f"- For {payload.input_stream.name}:\n")
            hexdump.hexdump(payload.content)
            print("")


@click.group()
def cli() -> None:
    """Discovers vulnerabilities in executables."""


@cli.command(help="Find vulnerabilities by using a fuzzer.")
@click.option(
    "--fuzzer",
    type=click.Choice([fuzzer.name for fuzzer in ExposedFuzzers]),
    required=True,
    help="Used fuzzer",
)
@click.option(
    "--elf",
    type=click.Path(exists=True),
    required=True,
    help="Executables to be fuzzed",
)
@click.option(
    "--samples",
    type=click.Path(exists=True),
    required=True,
    help="Folder containing samples",
)
@click.option(
    "--arguments",
    type=str,
    required=False,
    default="",
    help=(
        "Arguments to be passed. When fuzzing arguments, this is a format"
        " string."
    ),
)
def fuzz(fuzzer: str, elf: str, samples: str, arguments: str) -> None:
    fuzzer = convert_name_to_fuzzer(fuzzer, arguments)
    fuzzer.set_target(elf, samples)

    consumer = PrintPoVConsumer()
    fuzzer.attach_consumer(consumer)

    fuzzer.start_fuzzing()


def main() -> None:
    cli(prog_name="vulnerability_detection")


if __name__ == "__main__":
    main()
