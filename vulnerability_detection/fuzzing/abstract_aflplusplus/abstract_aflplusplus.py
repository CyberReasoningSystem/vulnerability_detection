import abc
import os
import shutil
import uuid
from pathlib import Path

import docker

from commons.folder_watcher import FolderWatcher
from commons.input_streams import InputStreams
from commons.proof_of_vulnerability import (
    ProofOfVulnerability,
    SingleStreamPayload,
)
from vulnerability_detection.configuration import Configuration
from vulnerability_detection.fuzzing.base_fuzzer import BaseFuzzer

BINARY_FILENAME = "binary"
SOURCE_FOLDER = "/tmp/fuzzer/{}/source"
SAMPLE_INPUTS_FOLDER = "/tmp/fuzzer/{}/sample_inputs"
OUTPUT_FOLDER = "/tmp/fuzzer/{}/output"
POVS_FOLDER = "/tmp/fuzzer/{}/output/default/povs/"


class SessionFolderStructure:
    source_folder: str
    sample_inputs_folder: str
    output_folder: str
    povs_folder: str

    def __init__(
        self,
        source_folder: str,
        sample_inputs_folder: str,
        output_folder: str,
        povs_folder: str,
    ) -> None:
        self.source_folder = source_folder
        self.sample_inputs_folder = sample_inputs_folder
        self.output_folder = output_folder
        self.povs_folder = povs_folder


class AFLPlusPlus(BaseFuzzer):
    __SUPPORTED_INPUT_STREAMS = [
        InputStreams.FILES,
        InputStreams.STDIN,
    ]
    __session_id: str
    __pov_watcher: FolderWatcher
    configuration: object = Configuration.AFLPlusPlus
    __folder_structure: SessionFolderStructure

    def __init__(self, input_streams: list = None) -> None:
        if input_streams:
            streams = input_streams
        else:
            streams = self.__SUPPORTED_INPUT_STREAMS
        super().__init__(streams)

        self.__session_id = uuid.uuid4().hex

        self.__pov_watcher = None
        self.__folder_structure = None

    def __del__(self) -> None:
        self.__pov_watcher.stop()

    def _start_fuzzing(self) -> None:
        client = docker.from_env()
        image = self.__build_image_if_not_already_built(client)
        volumes = self.__init_and_get_session_volumes()
        container = self.__create_container(client, image, volumes)

        self._watch_povs()

        self.__run_aflplusplus(container)

    def __init_and_get_session_volumes(self) -> None:
        self.__folder_structure = self.__generate_session_folder_structure()
        self.__create_folder_structure(self.__folder_structure)

        return self.__get_session_volumes(self.__folder_structure)

    def __generate_session_folder_structure(self) -> SessionFolderStructure:
        source_folder = SOURCE_FOLDER.format(self.__session_id)
        sample_inputs_folder = SAMPLE_INPUTS_FOLDER.format(self.__session_id)
        output_folder = OUTPUT_FOLDER.format(self.__session_id)
        povs_folder = POVS_FOLDER.format(self.__session_id)

        return SessionFolderStructure(
            source_folder, sample_inputs_folder, output_folder, povs_folder
        )

    def __create_folder_structure(
        self, structure: SessionFolderStructure
    ) -> None:
        os.makedirs(structure.source_folder)
        os.makedirs(structure.output_folder)
        os.makedirs(structure.povs_folder)

        binary = os.path.join(structure.source_folder, BINARY_FILENAME)
        shutil.copyfile(self._binary, binary)
        shutil.copytree(self._sample_inputs, structure.sample_inputs_folder)

        self._create_additional_folder_structure(structure)

    @abc.abstractmethod
    def _create_additional_folder_structure(
        self, structure: SessionFolderStructure
    ) -> None:
        raise NotImplementedError()

    def __get_session_volumes(self, structure: SessionFolderStructure) -> None:
        return {
            structure.source_folder: {"bind": "/target/source", "mode": "rw"},
            structure.sample_inputs_folder: {
                "bind": "/target/sample_inputs",
                "mode": "ro",
            },
            structure.output_folder: {
                "bind": "/target/analysis",
                "mode": "rw",
            },
        }

    def __build_image_if_not_already_built(
        self, client: docker.DockerClient
    ) -> None:
        if self.configuration.IMAGE_ID:
            return

        images = client.images.build(
            path=".",
            pull=True,
            buildargs={
                "USER_ID": str(os.getuid()),
                "GROUP_ID": str(os.getgid()),
            },
        )
        image = images[0]

        return image

    def __create_container(
        self,
        client: docker.DockerClient,
        image: docker.models.images.Image,
        volumes: dict,
    ) -> None:
        used_image_id = self.__get_image_id_depending_on_config(image)

        return client.containers.run(
            used_image_id,
            command="tail -f /dev/null",
            detach=True,
            environment={
                "AFL_I_DONT_CARE_ABOUT_MISSING_CRASHES": 1,
                "AFL_USE_QASAN": 1,
            },
            tty=True,
            volumes=volumes,
        )

    def __get_image_id_depending_on_config(
        self, image: docker.models.images.Image
    ) -> str:
        if self.configuration.IMAGE_ID:
            return self.configuration.IMAGE_ID

        return image.id

    def __run_aflplusplus(
        self, container: docker.models.containers.Container
    ) -> None:
        container.exec_run("sudo chmod +x /target/source/binary")
        container.exec_run("sudo chmod +x /target/source/adapter")

        fuzzing_command = self._get_fuzzing_command()
        container.exec_run(
            fuzzing_command,
            workdir="/AFLplusplus",
        )

    @abc.abstractmethod
    def _get_fuzzing_command(self) -> None:
        raise NotImplementedError()

    def _watch_povs(self) -> None:
        self.__pov_watcher = FolderWatcher(
            self.__folder_structure.povs_folder,
            self.configuration.POLLING_INTERVAL,
            self.pov_callback,
        )

    def pov_callback(self, pov_file: Path) -> None:
        pov = self.__create_pov_object(pov_file)
        self._add_new_pov(pov)

    def __create_pov_object(self, pov_file: str) -> None:
        full_pov_name = os.path.join(
            self.__folder_structure.povs_folder, pov_file
        )
        with open(full_pov_name, "rb") as pov_file:
            content = pov_file.read()
            payload = SingleStreamPayload(content, self._input_stream)
            pov = ProofOfVulnerability([payload])

            return pov
