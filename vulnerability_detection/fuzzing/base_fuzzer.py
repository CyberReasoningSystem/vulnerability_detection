import abc
import os
import typing

from commons.input_streams import InputStreams
from vulnerability_detection.exceptions import (
    BinaryNotFoundError,
    InputStreamNotSupportedError,
    SampleInputsNotFoundError,
)
from vulnerability_detection.pov_consumer import (
    PoVConsumer,
    ProofOfVulnerability,
)


class BaseFuzzer(abc.ABC):
    _supported_input_streams: typing.List[InputStreams]
    _supported_coniguration_keys: typing.List[str]
    _input_stream: InputStreams
    _configuration: dict
    _binary: str
    _sample_inputs: str
    _all_povs: typing.List[ProofOfVulnerability]
    _pov_consumers: typing.List[PoVConsumer]
    _logs: typing.List[str]

    def __init__(self, supported_streams: typing.List[InputStreams]) -> None:
        self._supported_input_streams = supported_streams

        self._input_stream = None
        self._configuration = None
        self._binary = None
        self._sample_inputs = None
        self._all_povs = []
        self._pov_consumers = []
        self._logs = []

    def set_input_stream(self, stream: InputStreams) -> None:
        if stream not in self._supported_input_streams:
            raise InputStreamNotSupportedError()

        self._input_stream = stream

    def set_target(self, binary_path: str, sample_inputs: str) -> None:
        if not os.path.isfile(binary_path):
            raise BinaryNotFoundError()

        if not os.path.isdir(sample_inputs):
            raise SampleInputsNotFoundError()

        self._binary = binary_path
        self._sample_inputs = sample_inputs

    def attach_consumer(self, consumer: PoVConsumer) -> None:
        self._pov_consumers.append(consumer)

    def start_fuzzing(self) -> None:
        self._start_fuzzing()
        self._watch_povs()

    @abc.abstractmethod
    def _start_fuzzing(self) -> None:
        raise NotImplementedError()

    @abc.abstractmethod
    def _watch_povs(self) -> None:
        # Must call self._add_new_pov() for each new POV that is detected
        raise NotImplementedError()

    def _add_new_pov(self, pov: ProofOfVulnerability) -> None:
        self._all_povs.append(pov)

        for consumer in self._pov_consumers:
            consumer.notify_new_pov(pov)

    def get_unconsumed_povs_count(self) -> int:
        return len(self._all_povs)

    def get_all_povs(self) -> typing.List[ProofOfVulnerability]:
        return self._all_povs

    def get_last_logs(self) -> typing.List[str]:
        logs = self._logs

        self._logs = []

        return logs
