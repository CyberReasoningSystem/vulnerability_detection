import os
import sys
from subprocess import getstatusoutput, Popen, DEVNULL
import re

def decompile():
    """Decompiles execs to source code 
    """
    
    print("Decompiling the files")
    executables_dir = 'executables'

    user_id = os.getuid()
    group_id = os.getgid()

    for subdir, dirs, files in os.walk(executables_dir):
        for file in files:
            abs_file_path = os.path.join(os.path.abspath(subdir), file)

            ret, out = getstatusoutput(f"docker run --rm -v {os.path.abspath(subdir)}:/destination --user {user_id}:{group_id} retdec retdec-decompiler /destination/{file}")

            if ret:
                print(f"There was an issue decompiling file {abs_file_path}: ")
                print(f"{out}")

 
    print()
    print()


def cleanup():
    """Cleanup after decompiling
    """
    print("Running cleanup through decompiled files")

    ret, out = getstatusoutput("rm -rf executables/*.bc")
    ret, out = getstatusoutput("rm -rf executables/*.dsm")
    ret, out = getstatusoutput("rm -rf executables/*.ll")
    ret, out = getstatusoutput("rm -rf executables/*.c")
    ret, out = getstatusoutput("rm -rf executables/*.config.json")

    print()
    print()


def clean_structure(filename):
    with open(filename, "r") as file:
        content = file.read()

    pattern = re.compile(r"(?s)struct\s+_IO_FILE\s+\{.*?\};")
    cleaned_content = pattern.sub("", content)

    with open(filename, "w") as file:
        file.write(cleaned_content)


def gather_results():
    """Gathers results after all the processing is done.
    """
    print("Gathering results")
    sources_dir = 'sources'
    exec_dir = 'executables'

    for subdir, _, files in os.walk(exec_dir):
        for file in files:
            # Find all the '*.err' files generated which map to a kind of
            # error found by klee
            if file.endswith(".c"):
                filepath = os.path.join(subdir, file)
                root, extension = os.path.splitext(file)

                ret, out = getstatusoutput(f"mkdir {sources_dir}/retdec_{root}")

                print(f"Cleaning up source {filepath}.")

                clean_structure(filepath)

                if ret:
                    print(f"There was an issue creating folder: {sources_dir}/retdec_{root}")
                else:
                    ret, out = getstatusoutput(f"cp {filepath} {sources_dir}/retdec_{root}/")
                    if ret:
                        print(f"There was an issue getting the results for \
                                file {filepath}")
                    else:
                        print(f"Successfully gathered results for {filepath}")
    print()
    print()





def main():
    decompile()
    gather_results()
    cleanup()

if __name__ == "__main__":
    main()
